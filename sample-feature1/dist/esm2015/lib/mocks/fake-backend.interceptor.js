import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { delay, dematerialize, materialize, mergeMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class FakeBackendInterceptor {
    constructor() { }
    intercept(request, next) {
        // return delayed observable to simulate server api call
        return of(null)
            .pipe(mergeMap(() => {
            if (request.url.endsWith('feature1api/feature1data')) {
                return of(new HttpResponse({ status: 200, body: [
                        { dataPoint1: 1, dataPoint2: 'testval1', dataPoint3: 'testval1', dataPoint4: 'testval1', dataPoint5: 'testval1' },
                        { dataPoint1: 2, dataPoint2: 'testval2', dataPoint3: 'testval2', dataPoint4: 'testval2', dataPoint5: 'testval2' },
                        { dataPoint1: 3, dataPoint2: 'testval3', dataPoint3: 'testval3', dataPoint4: 'testval3', dataPoint5: 'testval3' },
                        { dataPoint1: 4, dataPoint2: 'testval4', dataPoint3: 'testval4', dataPoint4: 'testval4', dataPoint5: 'testval4' },
                        { dataPoint1: 5, dataPoint2: 'testval5', dataPoint3: 'testval5', dataPoint4: 'testval5', dataPoint5: 'testval5' },
                        { dataPoint1: 6, dataPoint2: 'testval6', dataPoint3: 'testval6', dataPoint4: 'testval6', dataPoint5: 'testval6' },
                        { dataPoint1: 7, dataPoint2: 'testval7', dataPoint3: 'testval7', dataPoint4: 'testval7', dataPoint5: 'testval7' },
                        { dataPoint1: 8, dataPoint2: 'testval8', dataPoint3: 'testval8', dataPoint4: 'testval8', dataPoint5: 'testval8' }
                    ] }));
            }
            return next.handle(request);
        }))
            .pipe(materialize())
            .pipe(delay(500))
            .pipe(dematerialize());
    }
}
FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) { return new (t || FakeBackendInterceptor)(); };
FakeBackendInterceptor.ɵprov = i0.ɵɵdefineInjectable({ token: FakeBackendInterceptor, factory: FakeBackendInterceptor.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(FakeBackendInterceptor, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZS1iYWNrZW5kLmludGVyY2VwdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvc2FtcGxlLWZlYXR1cmUxL3NyYy9saWIvbW9ja3MvZmFrZS1iYWNrZW5kLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUF3RCxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHN0UsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxnQkFBZSxDQUFDO0lBRWhCLFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO1FBQ3BELHdEQUF3RDtRQUN4RCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7YUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNsQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLEVBQUU7Z0JBQ3BELE9BQU8sRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7d0JBQzNDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDO3dCQUMvRyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQzt3QkFDL0csRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUM7d0JBQy9HLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDO3dCQUMvRyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQzt3QkFDL0csRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUM7d0JBQy9HLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFDO3dCQUMvRyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBQztxQkFDaEgsRUFBQyxDQUFDLENBQUMsQ0FBQzthQUNSO1lBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO2FBQ0YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7NEZBeEJVLHNCQUFzQjs4REFBdEIsc0JBQXNCLFdBQXRCLHNCQUFzQjt1RkFBdEIsc0JBQXNCO2NBRGxDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVsYXksIGRlbWF0ZXJpYWxpemUsIG1hdGVyaWFsaXplLCBtZXJnZU1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZha2VCYWNrZW5kSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIC8vIHJldHVybiBkZWxheWVkIG9ic2VydmFibGUgdG8gc2ltdWxhdGUgc2VydmVyIGFwaSBjYWxsXG4gICAgcmV0dXJuIG9mKG51bGwpXG4gICAgICAucGlwZShtZXJnZU1hcCgoKSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0LnVybC5lbmRzV2l0aCgnZmVhdHVyZTFhcGkvZmVhdHVyZTFkYXRhJykpIHtcbiAgICAgICAgICByZXR1cm4gb2YobmV3IEh0dHBSZXNwb25zZSh7c3RhdHVzOiAyMDAsIGJvZHk6IFtcbiAgICAgICAgICAgICAge2RhdGFQb2ludDE6IDEsIGRhdGFQb2ludDI6ICd0ZXN0dmFsMScsIGRhdGFQb2ludDM6ICd0ZXN0dmFsMScsIGRhdGFQb2ludDQ6ICd0ZXN0dmFsMScsIGRhdGFQb2ludDU6ICd0ZXN0dmFsMSd9LFxuICAgICAgICAgICAgICB7ZGF0YVBvaW50MTogMiwgZGF0YVBvaW50MjogJ3Rlc3R2YWwyJywgZGF0YVBvaW50MzogJ3Rlc3R2YWwyJywgZGF0YVBvaW50NDogJ3Rlc3R2YWwyJywgZGF0YVBvaW50NTogJ3Rlc3R2YWwyJ30sXG4gICAgICAgICAgICAgIHtkYXRhUG9pbnQxOiAzLCBkYXRhUG9pbnQyOiAndGVzdHZhbDMnLCBkYXRhUG9pbnQzOiAndGVzdHZhbDMnLCBkYXRhUG9pbnQ0OiAndGVzdHZhbDMnLCBkYXRhUG9pbnQ1OiAndGVzdHZhbDMnfSxcbiAgICAgICAgICAgICAge2RhdGFQb2ludDE6IDQsIGRhdGFQb2ludDI6ICd0ZXN0dmFsNCcsIGRhdGFQb2ludDM6ICd0ZXN0dmFsNCcsIGRhdGFQb2ludDQ6ICd0ZXN0dmFsNCcsIGRhdGFQb2ludDU6ICd0ZXN0dmFsNCd9LFxuICAgICAgICAgICAgICB7ZGF0YVBvaW50MTogNSwgZGF0YVBvaW50MjogJ3Rlc3R2YWw1JywgZGF0YVBvaW50MzogJ3Rlc3R2YWw1JywgZGF0YVBvaW50NDogJ3Rlc3R2YWw1JywgZGF0YVBvaW50NTogJ3Rlc3R2YWw1J30sXG4gICAgICAgICAgICAgIHtkYXRhUG9pbnQxOiA2LCBkYXRhUG9pbnQyOiAndGVzdHZhbDYnLCBkYXRhUG9pbnQzOiAndGVzdHZhbDYnLCBkYXRhUG9pbnQ0OiAndGVzdHZhbDYnLCBkYXRhUG9pbnQ1OiAndGVzdHZhbDYnfSxcbiAgICAgICAgICAgICAge2RhdGFQb2ludDE6IDcsIGRhdGFQb2ludDI6ICd0ZXN0dmFsNycsIGRhdGFQb2ludDM6ICd0ZXN0dmFsNycsIGRhdGFQb2ludDQ6ICd0ZXN0dmFsNycsIGRhdGFQb2ludDU6ICd0ZXN0dmFsNyd9LFxuICAgICAgICAgICAgICB7ZGF0YVBvaW50MTogOCwgZGF0YVBvaW50MjogJ3Rlc3R2YWw4JywgZGF0YVBvaW50MzogJ3Rlc3R2YWw4JywgZGF0YVBvaW50NDogJ3Rlc3R2YWw4JywgZGF0YVBvaW50NTogJ3Rlc3R2YWw4J31cbiAgICAgICAgICAgIF19KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgICAgfSkpXG4gICAgICAucGlwZShtYXRlcmlhbGl6ZSgpKVxuICAgICAgLnBpcGUoZGVsYXkoNTAwKSlcbiAgICAgIC5waXBlKGRlbWF0ZXJpYWxpemUoKSk7XG4gIH1cbn1cbiJdfQ==